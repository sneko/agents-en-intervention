/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.0
 */
import * as reactQuery from '@tanstack/react-query';
import { useContext, Context } from './context';
import type * as Fetcher from './fetcher';
import { fetch } from './fetcher';
import type * as Schemas from './schemas';

export type LoginCheckPostError = Fetcher.ErrorWrapper<undefined>;

export type LoginCheckPostResponse = {
  token: string;
};

export type LoginCheckPostRequestBody = {
  login: string;
  password: string;
};

export type LoginCheckPostVariables = {
  body: LoginCheckPostRequestBody;
} & Context['fetcherOptions'];

/**
 * Creates a user token.
 */
export const fetchLoginCheckPost = (variables: LoginCheckPostVariables, signal?: AbortSignal) =>
  fetch<LoginCheckPostResponse, LoginCheckPostError, LoginCheckPostRequestBody, {}, {}, {}>({
    url: '/authentication',
    method: 'post',
    ...variables,
    signal,
  });

/**
 * Creates a user token.
 */
export const useLoginCheckPost = (
  options?: Omit<reactQuery.UseMutationOptions<LoginCheckPostResponse, LoginCheckPostError, LoginCheckPostVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = useContext();
  return reactQuery.useMutation<LoginCheckPostResponse, LoginCheckPostError, LoginCheckPostVariables>({
    mutationFn: (variables: LoginCheckPostVariables) => fetchLoginCheckPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiCategoriesGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
};

export type ApiCategoriesGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiCategoriesGetCollectionResponse = Schemas.Category[];

export type ApiCategoriesGetCollectionVariables = {
  queryParams?: ApiCategoriesGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of Category resources.
 */
export const fetchApiCategoriesGetCollection = (variables: ApiCategoriesGetCollectionVariables, signal?: AbortSignal) =>
  fetch<ApiCategoriesGetCollectionResponse, ApiCategoriesGetCollectionError, undefined, {}, ApiCategoriesGetCollectionQueryParams, {}>({
    url: '/categories',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves the collection of Category resources.
 */
export const useApiCategoriesGetCollection = <TData = ApiCategoriesGetCollectionResponse>(
  variables: ApiCategoriesGetCollectionVariables,
  options?: Omit<reactQuery.UseQueryOptions<ApiCategoriesGetCollectionResponse, ApiCategoriesGetCollectionError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiCategoriesGetCollectionResponse, ApiCategoriesGetCollectionError, TData>({
    queryKey: queryKeyFn({ path: '/categories', operationId: 'apiCategoriesGetCollection', variables }),
    queryFn: ({ signal }) => fetchApiCategoriesGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiCommentsPostError = Fetcher.ErrorWrapper<undefined>;

export type ApiCommentsPostVariables = {
  body?: Schemas.CommentCommentPost;
} & Context['fetcherOptions'];

/**
 * Creates a Comment resource.
 */
export const fetchApiCommentsPost = (variables: ApiCommentsPostVariables, signal?: AbortSignal) =>
  fetch<Schemas.Comment, ApiCommentsPostError, Schemas.CommentCommentPost, {}, {}, {}>({ url: '/comments', method: 'post', ...variables, signal });

/**
 * Creates a Comment resource.
 */
export const useApiCommentsPost = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.Comment, ApiCommentsPostError, ApiCommentsPostVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = useContext();
  return reactQuery.useMutation<Schemas.Comment, ApiCommentsPostError, ApiCommentsPostVariables>({
    mutationFn: (variables: ApiCommentsPostVariables) => fetchApiCommentsPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiEmployersEmployerIdactiveAgentsGetCollectionPathParams = {
  /**
   * User identifier
   */
  employerId: string;
};

export type ApiEmployersEmployerIdactiveAgentsGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
  active?: boolean;
  ['active[]']?: boolean[];
  ['groups.slug']?: string;
  ['groups.slug[]']?: string[];
};

export type ApiEmployersEmployerIdactiveAgentsGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiEmployersEmployerIdactiveAgentsGetCollectionResponse = Schemas.UserAgentGetCollection[];

export type ApiEmployersEmployerIdactiveAgentsGetCollectionVariables = {
  pathParams: ApiEmployersEmployerIdactiveAgentsGetCollectionPathParams;
  queryParams?: ApiEmployersEmployerIdactiveAgentsGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of User resources.
 */
export const fetchApiEmployersEmployerIdactiveAgentsGetCollection = (
  variables: ApiEmployersEmployerIdactiveAgentsGetCollectionVariables,
  signal?: AbortSignal
) =>
  fetch<
    ApiEmployersEmployerIdactiveAgentsGetCollectionResponse,
    ApiEmployersEmployerIdactiveAgentsGetCollectionError,
    undefined,
    {},
    ApiEmployersEmployerIdactiveAgentsGetCollectionQueryParams,
    ApiEmployersEmployerIdactiveAgentsGetCollectionPathParams
  >({ url: '/employers/{employerId}/active-agents', method: 'get', ...variables, signal });

/**
 * Retrieves the collection of User resources.
 */
export const useApiEmployersEmployerIdactiveAgentsGetCollection = <TData = ApiEmployersEmployerIdactiveAgentsGetCollectionResponse>(
  variables: ApiEmployersEmployerIdactiveAgentsGetCollectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ApiEmployersEmployerIdactiveAgentsGetCollectionResponse, ApiEmployersEmployerIdactiveAgentsGetCollectionError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiEmployersEmployerIdactiveAgentsGetCollectionResponse, ApiEmployersEmployerIdactiveAgentsGetCollectionError, TData>({
    queryKey: queryKeyFn({
      path: '/employers/{employerId}/active-agents',
      operationId: 'apiEmployersEmployerIdactiveAgentsGetCollection',
      variables,
    }),
    queryFn: ({ signal }) => fetchApiEmployersEmployerIdactiveAgentsGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiEmployersEmployerIdinterventionsGetCollectionPathParams = {
  /**
   * Intervention identifier
   */
  employerId: string;
};

export type ApiEmployersEmployerIdinterventionsGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
  ['order[id]']?: 'asc' | 'desc';
  ['status.slug']?: string;
  ['status.slug[]']?: string[];
};

export type ApiEmployersEmployerIdinterventionsGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiEmployersEmployerIdinterventionsGetCollectionResponse = Schemas.InterventionInterventionGetCollection[];

export type ApiEmployersEmployerIdinterventionsGetCollectionVariables = {
  pathParams: ApiEmployersEmployerIdinterventionsGetCollectionPathParams;
  queryParams?: ApiEmployersEmployerIdinterventionsGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of Intervention resources.
 */
export const fetchApiEmployersEmployerIdinterventionsGetCollection = (
  variables: ApiEmployersEmployerIdinterventionsGetCollectionVariables,
  signal?: AbortSignal
) =>
  fetch<
    ApiEmployersEmployerIdinterventionsGetCollectionResponse,
    ApiEmployersEmployerIdinterventionsGetCollectionError,
    undefined,
    {},
    ApiEmployersEmployerIdinterventionsGetCollectionQueryParams,
    ApiEmployersEmployerIdinterventionsGetCollectionPathParams
  >({ url: '/employers/{employerId}/interventions', method: 'get', ...variables, signal });

/**
 * Retrieves the collection of Intervention resources.
 */
export const useApiEmployersEmployerIdinterventionsGetCollection = <TData = ApiEmployersEmployerIdinterventionsGetCollectionResponse>(
  variables: ApiEmployersEmployerIdinterventionsGetCollectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ApiEmployersEmployerIdinterventionsGetCollectionResponse,
      ApiEmployersEmployerIdinterventionsGetCollectionError,
      TData
    >,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiEmployersEmployerIdinterventionsGetCollectionResponse, ApiEmployersEmployerIdinterventionsGetCollectionError, TData>({
    queryKey: queryKeyFn({
      path: '/employers/{employerId}/interventions',
      operationId: 'apiEmployersEmployerIdinterventionsGetCollection',
      variables,
    }),
    queryFn: ({ signal }) => fetchApiEmployersEmployerIdinterventionsGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiEmployersEmployerIdusersGetCollectionPathParams = {
  /**
   * User identifier
   */
  employerId: string;
};

export type ApiEmployersEmployerIdusersGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
  active?: boolean;
  ['active[]']?: boolean[];
  ['groups.slug']?: string;
  ['groups.slug[]']?: string[];
};

export type ApiEmployersEmployerIdusersGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiEmployersEmployerIdusersGetCollectionResponse = Schemas.UserUserGetCollection[];

export type ApiEmployersEmployerIdusersGetCollectionVariables = {
  pathParams: ApiEmployersEmployerIdusersGetCollectionPathParams;
  queryParams?: ApiEmployersEmployerIdusersGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of User resources.
 */
export const fetchApiEmployersEmployerIdusersGetCollection = (variables: ApiEmployersEmployerIdusersGetCollectionVariables, signal?: AbortSignal) =>
  fetch<
    ApiEmployersEmployerIdusersGetCollectionResponse,
    ApiEmployersEmployerIdusersGetCollectionError,
    undefined,
    {},
    ApiEmployersEmployerIdusersGetCollectionQueryParams,
    ApiEmployersEmployerIdusersGetCollectionPathParams
  >({ url: '/employers/{employerId}/users', method: 'get', ...variables, signal });

/**
 * Retrieves the collection of User resources.
 */
export const useApiEmployersEmployerIdusersGetCollection = <TData = ApiEmployersEmployerIdusersGetCollectionResponse>(
  variables: ApiEmployersEmployerIdusersGetCollectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ApiEmployersEmployerIdusersGetCollectionResponse, ApiEmployersEmployerIdusersGetCollectionError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiEmployersEmployerIdusersGetCollectionResponse, ApiEmployersEmployerIdusersGetCollectionError, TData>({
    queryKey: queryKeyFn({ path: '/employers/{employerId}/users', operationId: 'apiEmployersEmployerIdusersGetCollection', variables }),
    queryFn: ({ signal }) => fetchApiEmployersEmployerIdusersGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiEmployersIdGetPathParams = {
  /**
   * Employer identifier
   */
  id: string;
};

export type ApiEmployersIdGetError = Fetcher.ErrorWrapper<undefined>;

export type ApiEmployersIdGetVariables = {
  pathParams: ApiEmployersIdGetPathParams;
} & Context['fetcherOptions'];

/**
 * Retrieves a Employer resource.
 */
export const fetchApiEmployersIdGet = (variables: ApiEmployersIdGetVariables, signal?: AbortSignal) =>
  fetch<Schemas.EmployerEmployerGet, ApiEmployersIdGetError, undefined, {}, {}, ApiEmployersIdGetPathParams>({
    url: '/employers/{id}',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves a Employer resource.
 */
export const useApiEmployersIdGet = <TData = Schemas.EmployerEmployerGet>(
  variables: ApiEmployersIdGetVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.EmployerEmployerGet, ApiEmployersIdGetError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<Schemas.EmployerEmployerGet, ApiEmployersIdGetError, TData>({
    queryKey: queryKeyFn({ path: '/employers/{id}', operationId: 'apiEmployersIdGet', variables }),
    queryFn: ({ signal }) => fetchApiEmployersIdGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiInterventionsPostError = Fetcher.ErrorWrapper<undefined>;

export type ApiInterventionsPostVariables = {
  body?: Schemas.InterventionInterventionPost;
} & Context['fetcherOptions'];

/**
 * Creates a Intervention resource.
 */
export const fetchApiInterventionsPost = (variables: ApiInterventionsPostVariables, signal?: AbortSignal) =>
  fetch<Schemas.Intervention, ApiInterventionsPostError, Schemas.InterventionInterventionPost, {}, {}, {}>({
    url: '/interventions',
    method: 'post',
    ...variables,
    signal,
  });

/**
 * Creates a Intervention resource.
 */
export const useApiInterventionsPost = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.Intervention, ApiInterventionsPostError, ApiInterventionsPostVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = useContext();
  return reactQuery.useMutation<Schemas.Intervention, ApiInterventionsPostError, ApiInterventionsPostVariables>({
    mutationFn: (variables: ApiInterventionsPostVariables) => fetchApiInterventionsPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiInterventionsIdGetPathParams = {
  /**
   * Intervention identifier
   */
  id: string;
};

export type ApiInterventionsIdGetError = Fetcher.ErrorWrapper<undefined>;

export type ApiInterventionsIdGetVariables = {
  pathParams: ApiInterventionsIdGetPathParams;
} & Context['fetcherOptions'];

/**
 * Retrieves a Intervention resource.
 */
export const fetchApiInterventionsIdGet = (variables: ApiInterventionsIdGetVariables, signal?: AbortSignal) =>
  fetch<Schemas.InterventionInterventionGet, ApiInterventionsIdGetError, undefined, {}, {}, ApiInterventionsIdGetPathParams>({
    url: '/interventions/{id}',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves a Intervention resource.
 */
export const useApiInterventionsIdGet = <TData = Schemas.InterventionInterventionGet>(
  variables: ApiInterventionsIdGetVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.InterventionInterventionGet, ApiInterventionsIdGetError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<Schemas.InterventionInterventionGet, ApiInterventionsIdGetError, TData>({
    queryKey: queryKeyFn({ path: '/interventions/{id}', operationId: 'apiInterventionsIdGet', variables }),
    queryFn: ({ signal }) => fetchApiInterventionsIdGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiInterventionsIdDeletePathParams = {
  /**
   * Intervention identifier
   */
  id: string;
};

export type ApiInterventionsIdDeleteError = Fetcher.ErrorWrapper<undefined>;

export type ApiInterventionsIdDeleteVariables = {
  pathParams: ApiInterventionsIdDeletePathParams;
} & Context['fetcherOptions'];

/**
 * Removes the Intervention resource.
 */
export const fetchApiInterventionsIdDelete = (variables: ApiInterventionsIdDeleteVariables, signal?: AbortSignal) =>
  fetch<undefined, ApiInterventionsIdDeleteError, undefined, {}, {}, ApiInterventionsIdDeletePathParams>({
    url: '/interventions/{id}',
    method: 'delete',
    ...variables,
    signal,
  });

/**
 * Removes the Intervention resource.
 */
export const useApiInterventionsIdDelete = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, ApiInterventionsIdDeleteError, ApiInterventionsIdDeleteVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = useContext();
  return reactQuery.useMutation<undefined, ApiInterventionsIdDeleteError, ApiInterventionsIdDeleteVariables>({
    mutationFn: (variables: ApiInterventionsIdDeleteVariables) => fetchApiInterventionsIdDelete({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiInterventionsIdPatchPathParams = {
  /**
   * Intervention identifier
   */
  id: string;
};

export type ApiInterventionsIdPatchError = Fetcher.ErrorWrapper<undefined>;

export type ApiInterventionsIdPatchVariables = {
  pathParams: ApiInterventionsIdPatchPathParams;
} & Context['fetcherOptions'];

/**
 * Updates the Intervention resource.
 */
export const fetchApiInterventionsIdPatch = (variables: ApiInterventionsIdPatchVariables, signal?: AbortSignal) =>
  fetch<void, ApiInterventionsIdPatchError, undefined, {}, {}, ApiInterventionsIdPatchPathParams>({
    url: '/interventions/{id}',
    method: 'patch',
    ...variables,
    signal,
  });

/**
 * Updates the Intervention resource.
 */
export const useApiInterventionsIdPatch = (
  options?: Omit<reactQuery.UseMutationOptions<void, ApiInterventionsIdPatchError, ApiInterventionsIdPatchVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = useContext();
  return reactQuery.useMutation<void, ApiInterventionsIdPatchError, ApiInterventionsIdPatchVariables>({
    mutationFn: (variables: ApiInterventionsIdPatchVariables) => fetchApiInterventionsIdPatch({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiLocationsGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
};

export type ApiLocationsGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiLocationsGetCollectionResponse = Schemas.Location[];

export type ApiLocationsGetCollectionVariables = {
  queryParams?: ApiLocationsGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of Location resources.
 */
export const fetchApiLocationsGetCollection = (variables: ApiLocationsGetCollectionVariables, signal?: AbortSignal) =>
  fetch<ApiLocationsGetCollectionResponse, ApiLocationsGetCollectionError, undefined, {}, ApiLocationsGetCollectionQueryParams, {}>({
    url: '/locations',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves the collection of Location resources.
 */
export const useApiLocationsGetCollection = <TData = ApiLocationsGetCollectionResponse>(
  variables: ApiLocationsGetCollectionVariables,
  options?: Omit<reactQuery.UseQueryOptions<ApiLocationsGetCollectionResponse, ApiLocationsGetCollectionError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiLocationsGetCollectionResponse, ApiLocationsGetCollectionError, TData>({
    queryKey: queryKeyFn({ path: '/locations', operationId: 'apiLocationsGetCollection', variables }),
    queryFn: ({ signal }) => fetchApiLocationsGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiPictureTagsSlugGetPathParams = {
  /**
   * PictureTag identifier
   */
  slug: string;
};

export type ApiPictureTagsSlugGetError = Fetcher.ErrorWrapper<undefined>;

export type ApiPictureTagsSlugGetVariables = {
  pathParams: ApiPictureTagsSlugGetPathParams;
} & Context['fetcherOptions'];

/**
 * Retrieves a PictureTag resource.
 */
export const fetchApiPictureTagsSlugGet = (variables: ApiPictureTagsSlugGetVariables, signal?: AbortSignal) =>
  fetch<Schemas.PictureTag, ApiPictureTagsSlugGetError, undefined, {}, {}, ApiPictureTagsSlugGetPathParams>({
    url: '/picture-tags/{slug}',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves a PictureTag resource.
 */
export const useApiPictureTagsSlugGet = <TData = Schemas.PictureTag>(
  variables: ApiPictureTagsSlugGetVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.PictureTag, ApiPictureTagsSlugGetError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<Schemas.PictureTag, ApiPictureTagsSlugGetError, TData>({
    queryKey: queryKeyFn({ path: '/picture-tags/{slug}', operationId: 'apiPictureTagsSlugGet', variables }),
    queryFn: ({ signal }) => fetchApiPictureTagsSlugGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiPicturesPostError = Fetcher.ErrorWrapper<undefined>;

export type ApiPicturesPostVariables = {
  body?: Schemas.PicturePicturePost;
} & Context['fetcherOptions'];

/**
 * Creates a Picture resource.
 */
export const fetchApiPicturesPost = (variables: ApiPicturesPostVariables, signal?: AbortSignal) =>
  fetch<Schemas.Picture, ApiPicturesPostError, Schemas.PicturePicturePost, {}, {}, {}>({ url: '/pictures', method: 'post', ...variables, signal });

/**
 * Creates a Picture resource.
 */
export const useApiPicturesPost = (
  options?: Omit<reactQuery.UseMutationOptions<Schemas.Picture, ApiPicturesPostError, ApiPicturesPostVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = useContext();
  return reactQuery.useMutation<Schemas.Picture, ApiPicturesPostError, ApiPicturesPostVariables>({
    mutationFn: (variables: ApiPicturesPostVariables) => fetchApiPicturesPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiPicturesIdDeletePathParams = {
  /**
   * Picture identifier
   */
  id: string;
};

export type ApiPicturesIdDeleteError = Fetcher.ErrorWrapper<undefined>;

export type ApiPicturesIdDeleteVariables = {
  pathParams: ApiPicturesIdDeletePathParams;
} & Context['fetcherOptions'];

/**
 * Removes the Picture resource.
 */
export const fetchApiPicturesIdDelete = (variables: ApiPicturesIdDeleteVariables, signal?: AbortSignal) =>
  fetch<undefined, ApiPicturesIdDeleteError, undefined, {}, {}, ApiPicturesIdDeletePathParams>({
    url: '/pictures/{id}',
    method: 'delete',
    ...variables,
    signal,
  });

/**
 * Removes the Picture resource.
 */
export const useApiPicturesIdDelete = (
  options?: Omit<reactQuery.UseMutationOptions<undefined, ApiPicturesIdDeleteError, ApiPicturesIdDeleteVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = useContext();
  return reactQuery.useMutation<undefined, ApiPicturesIdDeleteError, ApiPicturesIdDeleteVariables>({
    mutationFn: (variables: ApiPicturesIdDeleteVariables) => fetchApiPicturesIdDelete({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ApiPrioritiesGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
};

export type ApiPrioritiesGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiPrioritiesGetCollectionResponse = Schemas.Priority[];

export type ApiPrioritiesGetCollectionVariables = {
  queryParams?: ApiPrioritiesGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of Priority resources.
 */
export const fetchApiPrioritiesGetCollection = (variables: ApiPrioritiesGetCollectionVariables, signal?: AbortSignal) =>
  fetch<ApiPrioritiesGetCollectionResponse, ApiPrioritiesGetCollectionError, undefined, {}, ApiPrioritiesGetCollectionQueryParams, {}>({
    url: '/priorities',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves the collection of Priority resources.
 */
export const useApiPrioritiesGetCollection = <TData = ApiPrioritiesGetCollectionResponse>(
  variables: ApiPrioritiesGetCollectionVariables,
  options?: Omit<reactQuery.UseQueryOptions<ApiPrioritiesGetCollectionResponse, ApiPrioritiesGetCollectionError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiPrioritiesGetCollectionResponse, ApiPrioritiesGetCollectionError, TData>({
    queryKey: queryKeyFn({ path: '/priorities', operationId: 'apiPrioritiesGetCollection', variables }),
    queryFn: ({ signal }) => fetchApiPrioritiesGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiStatusGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
};

export type ApiStatusGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiStatusGetCollectionResponse = Schemas.Status[];

export type ApiStatusGetCollectionVariables = {
  queryParams?: ApiStatusGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of Status resources.
 */
export const fetchApiStatusGetCollection = (variables: ApiStatusGetCollectionVariables, signal?: AbortSignal) =>
  fetch<ApiStatusGetCollectionResponse, ApiStatusGetCollectionError, undefined, {}, ApiStatusGetCollectionQueryParams, {}>({
    url: '/status',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves the collection of Status resources.
 */
export const useApiStatusGetCollection = <TData = ApiStatusGetCollectionResponse>(
  variables: ApiStatusGetCollectionVariables,
  options?: Omit<reactQuery.UseQueryOptions<ApiStatusGetCollectionResponse, ApiStatusGetCollectionError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiStatusGetCollectionResponse, ApiStatusGetCollectionError, TData>({
    queryKey: queryKeyFn({ path: '/status', operationId: 'apiStatusGetCollection', variables }),
    queryFn: ({ signal }) => fetchApiStatusGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiStatusSlugGetPathParams = {
  /**
   * Status identifier
   */
  slug: string;
};

export type ApiStatusSlugGetError = Fetcher.ErrorWrapper<undefined>;

export type ApiStatusSlugGetVariables = {
  pathParams: ApiStatusSlugGetPathParams;
} & Context['fetcherOptions'];

/**
 * Retrieves a Status resource.
 */
export const fetchApiStatusSlugGet = (variables: ApiStatusSlugGetVariables, signal?: AbortSignal) =>
  fetch<Schemas.Status, ApiStatusSlugGetError, undefined, {}, {}, ApiStatusSlugGetPathParams>({
    url: '/status/{slug}',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves a Status resource.
 */
export const useApiStatusSlugGet = <TData = Schemas.Status>(
  variables: ApiStatusSlugGetVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.Status, ApiStatusSlugGetError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<Schemas.Status, ApiStatusSlugGetError, TData>({
    queryKey: queryKeyFn({ path: '/status/{slug}', operationId: 'apiStatusSlugGet', variables }),
    queryFn: ({ signal }) => fetchApiStatusSlugGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiTypesGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiTypesGetCollectionResponse = Schemas.Type[];

export type ApiTypesGetCollectionVariables = Context['fetcherOptions'];

/**
 * Retrieves the collection of Type resources.
 */
export const fetchApiTypesGetCollection = (variables: ApiTypesGetCollectionVariables, signal?: AbortSignal) =>
  fetch<ApiTypesGetCollectionResponse, ApiTypesGetCollectionError, undefined, {}, {}, {}>({ url: '/types', method: 'get', ...variables, signal });

/**
 * Retrieves the collection of Type resources.
 */
export const useApiTypesGetCollection = <TData = ApiTypesGetCollectionResponse>(
  variables: ApiTypesGetCollectionVariables,
  options?: Omit<reactQuery.UseQueryOptions<ApiTypesGetCollectionResponse, ApiTypesGetCollectionError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiTypesGetCollectionResponse, ApiTypesGetCollectionError, TData>({
    queryKey: queryKeyFn({ path: '/types', operationId: 'apiTypesGetCollection', variables }),
    queryFn: ({ signal }) => fetchApiTypesGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiUsersIdGetPathParams = {
  /**
   * User identifier
   */
  id: string;
};

export type ApiUsersIdGetError = Fetcher.ErrorWrapper<undefined>;

export type ApiUsersIdGetVariables = {
  pathParams: ApiUsersIdGetPathParams;
} & Context['fetcherOptions'];

/**
 * Retrieves a User resource.
 */
export const fetchApiUsersIdGet = (variables: ApiUsersIdGetVariables, signal?: AbortSignal) =>
  fetch<Schemas.UserUserGet, ApiUsersIdGetError, undefined, {}, {}, ApiUsersIdGetPathParams>({
    url: '/users/{id}',
    method: 'get',
    ...variables,
    signal,
  });

/**
 * Retrieves a User resource.
 */
export const useApiUsersIdGet = <TData = Schemas.UserUserGet>(
  variables: ApiUsersIdGetVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.UserUserGet, ApiUsersIdGetError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<Schemas.UserUserGet, ApiUsersIdGetError, TData>({
    queryKey: queryKeyFn({ path: '/users/{id}', operationId: 'apiUsersIdGet', variables }),
    queryFn: ({ signal }) => fetchApiUsersIdGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ApiUsersUserIdinterventionsGetCollectionPathParams = {
  /**
   * Intervention identifier
   */
  userId: string;
};

export type ApiUsersUserIdinterventionsGetCollectionQueryParams = {
  /**
   * The collection page number
   *
   * @default 1
   */
  page?: number;
  ['order[id]']?: 'asc' | 'desc';
  ['status.slug']?: string;
  ['status.slug[]']?: string[];
};

export type ApiUsersUserIdinterventionsGetCollectionError = Fetcher.ErrorWrapper<undefined>;

export type ApiUsersUserIdinterventionsGetCollectionResponse = Schemas.InterventionInterventionGetCollection[];

export type ApiUsersUserIdinterventionsGetCollectionVariables = {
  pathParams: ApiUsersUserIdinterventionsGetCollectionPathParams;
  queryParams?: ApiUsersUserIdinterventionsGetCollectionQueryParams;
} & Context['fetcherOptions'];

/**
 * Retrieves the collection of Intervention resources.
 */
export const fetchApiUsersUserIdinterventionsGetCollection = (variables: ApiUsersUserIdinterventionsGetCollectionVariables, signal?: AbortSignal) =>
  fetch<
    ApiUsersUserIdinterventionsGetCollectionResponse,
    ApiUsersUserIdinterventionsGetCollectionError,
    undefined,
    {},
    ApiUsersUserIdinterventionsGetCollectionQueryParams,
    ApiUsersUserIdinterventionsGetCollectionPathParams
  >({ url: '/users/{userId}/interventions', method: 'get', ...variables, signal });

/**
 * Retrieves the collection of Intervention resources.
 */
export const useApiUsersUserIdinterventionsGetCollection = <TData = ApiUsersUserIdinterventionsGetCollectionResponse>(
  variables: ApiUsersUserIdinterventionsGetCollectionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ApiUsersUserIdinterventionsGetCollectionResponse, ApiUsersUserIdinterventionsGetCollectionError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useContext(options);
  return reactQuery.useQuery<ApiUsersUserIdinterventionsGetCollectionResponse, ApiUsersUserIdinterventionsGetCollectionError, TData>({
    queryKey: queryKeyFn({ path: '/users/{userId}/interventions', operationId: 'apiUsersUserIdinterventionsGetCollection', variables }),
    queryFn: ({ signal }) => fetchApiUsersUserIdinterventionsGetCollection({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: '/categories';
      operationId: 'apiCategoriesGetCollection';
      variables: ApiCategoriesGetCollectionVariables;
    }
  | {
      path: '/employers/{employerId}/active-agents';
      operationId: 'apiEmployersEmployerIdactiveAgentsGetCollection';
      variables: ApiEmployersEmployerIdactiveAgentsGetCollectionVariables;
    }
  | {
      path: '/employers/{employerId}/interventions';
      operationId: 'apiEmployersEmployerIdinterventionsGetCollection';
      variables: ApiEmployersEmployerIdinterventionsGetCollectionVariables;
    }
  | {
      path: '/employers/{employerId}/users';
      operationId: 'apiEmployersEmployerIdusersGetCollection';
      variables: ApiEmployersEmployerIdusersGetCollectionVariables;
    }
  | {
      path: '/employers/{id}';
      operationId: 'apiEmployersIdGet';
      variables: ApiEmployersIdGetVariables;
    }
  | {
      path: '/interventions/{id}';
      operationId: 'apiInterventionsIdGet';
      variables: ApiInterventionsIdGetVariables;
    }
  | {
      path: '/locations';
      operationId: 'apiLocationsGetCollection';
      variables: ApiLocationsGetCollectionVariables;
    }
  | {
      path: '/picture-tags/{slug}';
      operationId: 'apiPictureTagsSlugGet';
      variables: ApiPictureTagsSlugGetVariables;
    }
  | {
      path: '/priorities';
      operationId: 'apiPrioritiesGetCollection';
      variables: ApiPrioritiesGetCollectionVariables;
    }
  | {
      path: '/status';
      operationId: 'apiStatusGetCollection';
      variables: ApiStatusGetCollectionVariables;
    }
  | {
      path: '/status/{slug}';
      operationId: 'apiStatusSlugGet';
      variables: ApiStatusSlugGetVariables;
    }
  | {
      path: '/types';
      operationId: 'apiTypesGetCollection';
      variables: ApiTypesGetCollectionVariables;
    }
  | {
      path: '/users/{id}';
      operationId: 'apiUsersIdGet';
      variables: ApiUsersIdGetVariables;
    }
  | {
      path: '/users/{userId}/interventions';
      operationId: 'apiUsersUserIdinterventionsGetCollection';
      variables: ApiUsersUserIdinterventionsGetCollectionVariables;
    };
